from django.shortcuts import render,redirect
from django.urls import reverse

# Create your views here.
def show_result(request,data):
    print('called show_result')
    context={
        'title':'Результаты get запроса вида (/lsn2/?name=Ivan&age=30&city=Moscow), то есть данные были переданы через конвертер str',
        'data' : data
    }# Используем render для создания ответа
    response = render(request, 'lesson2/result.html', context)

    # Устанавливаем заголовки в ответе
    response['Cache-Control'] = 'no-cache, no-store, must-revalidate'  # Заголовки кэширования
    response['Pragma'] = 'no-cache'
    response['Expires'] = '0'
    return response  # Возвращаем ответ с установленными заголовками

def index(request):
    if request.GET:
        """
        ниже обработка get запроса с параметрами, такого вида: /lsn2/?name=Ivan&age=30&city=Moscow
        в примере используется redirect, то есть перенаправление на другой url адрес, также здесь используется
        функция reverse которая помогает объединить url и передаваемые параметры ВАЖНО ПОМНИТЬ ЧТО ЭТО СТРОКА С ПЕРЕДАВАЕМЫМИ
        ПАРАМЕТРАМИ, В ДАННОМ ПРИМЕРЕ ДАННЫЕ ПРИНИМАЮТСЯ МАРШРУТОМ show_result С ПОМОЩЬЮ КОНВЕРТЕРА STR

        такой способ передачи данных (reverse) подходит для передачи небольшого объёма данных, часто используется для фильтров в
        интернет магазинах, также важно учитывать что url принимающего маршрута должен выглядеть примерно так:
        'lsn2/show_result/<str:data>/'  (то есть у него должен быть конвертер для обработки полученных данных)

        также в примере используется redirect - это функция перенаправления пользователя на другую страницу, redirect принимает
        два параметра первый это сам url адрес маршрута в виде строки (в данном случае мы чтобы передать параметры использовали 
        reverse который вернулся в виде строки), и второй параметр permanent True/False, это обозначает перенаправление идёт на 
        постоянный новый адрес (статус код 301) или на временный адрес (статус код 302)

        ===========================================================================================
        ВАЖНО! -> ПРИНТЫ НЕ ВСЕГДА ВЫВОДЯТСЯ В КОНСОЛЬ, ОСОБЕННО ЕСЛИ ЗАПРОС ПОВТОРЯЕТСЯ (ТО ЕСТЬ ПАРАМЕТРЫ В СТРОКЕ ТЕЖЕ САМЫЕ)
        ЭТО СВЯЗАНО С КЭШИРОВАНИЕМ ЗАПРОСОВ БРАУЗЕРОМ
        ТО ЕСТЬ В ДАННОЙ СИТУАЦИИ ПРОИСХОДИТ ТАК: 
        1. МЫ ВВЕЛИ В СТРОКУ http://127.0.0.1:8000/lsn2/?name=Vas&age=10&city=NewYourk 
        2. ОТРАБОТАЛА ФУНКЦИЯ INDEX И ПЕРЕНАПРАВИЛА ЗАПРОС НА ПРЕДСТАВЛЕНИЕ SHOW_RESULT C ПАРАМЕТРАМИ
        3. БРАУЗЕР ЗАПОМНИЛ РЕЗУЛЬТАТ ЗАПРОСА http://127.0.0.1:8000/lsn2/?name=Vas&age=10&city=NewYourk , что это show_result
        Теперь браузеру больше не требуется вызывать index он напрямую идёт в show_result, поэтому и принты из него не выводятся 
        при том же самом запросе.

        ЭТО МОЖНО РЕШИТЬ С ПОМОЩЬЮ УСТАНОВКИ ВРЕМЕННОГО ПЕРЕНАПРАВЛЕНИЯ ТО ЕСТЬ В REDIRECT PERMANENT = FALSE (302 - ОТВЕТ СЕРВЕРА)
        И С ПОМОЩЬЮ ДОБАВЛЕНИЯ ЗАГОЛВКОВ В REQUESTS СМОТРИ УСТАНОВКУ ЗАГОЛОВКОВ В SHOW_RESULT ТО ЕСТЬ БРАУЗЕРУ НУЖНО ОБЪЯСНИТЬ ЧТО СТРАНИЦА 
        НЕ ПОСТОЯННА (СТАТУС КОД 302)  И УСТАНОВИТЬ ЗАГОЛОВКИ В РУЧНУЮ, ЧТОБЫ НАВЕРНЯКА.
        """
        print(f'\n{"="*40} GET {"="*40}')
        print(request.GET) # посмотреть всю коллекцию
        print(f'{"="*40} END {"="*40}\n')
        name = request.GET.get('name','default_name')
        age = request.GET.get('age','default_age')
        city = request.GET.get('city','default_city')
        output_data = f"{name}, {age}, {city}"
        redir_url = reverse('lesson2:show_result', args=(output_data,),) # ВАЖНО ПОМНИТЬ REVERSE ЭТО СТРОКА С URL АДРЕСОМ
        return redirect(redir_url,permanent=False) # чтобы браузер не кешировал страницу установим false и зададим заголовки в show_result в ручную

        
    context = {
        'title':'Запросы get и post, см. эти примеры в консоли',
    }

    return render(request, 'lesson2/index.html', context)